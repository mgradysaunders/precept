/*-*- C++ -*-*/
/* Copyright (c) 2018-20 M. Grady Saunders
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   1. Redistributions of source code must retain the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*-*-*-*-*-*-*/
#if !(__cplusplus >= 201709L)
#error "Precept requires >= C++20"
#endif // #if !(__cplusplus >= 201709L)
#pragma once
#ifndef PRE_MEMORY_TRACKING_ALLOCATOR
#define PRE_MEMORY_TRACKING_ALLOCATOR

#include <cstddef>
#include <cstdint>
#include <memory>

namespace pre {

/// An info structure for `TrackingAllocator`.
struct TrackingAllocatorInfo {
    std::int64_t allocate_calls = 0;   ///< Number of allocate calls.
    std::int64_t allocation = 0;       ///< Current allocation in bytes.
    std::int64_t max_allocation = 0;   ///< Maximum allocation in bytes.
    std::int64_t deallocate_calls = 0; ///< Number of deallocate calls.
};

/// A tracking allocator.
template <typename T>
class TrackingAllocator {
  public:
    typedef T value_type;

    typedef std::true_type propagate_on_container_copy_assignment;

    typedef std::true_type propagate_on_container_move_assignment;

    typedef std::true_type propagate_on_container_swap;

    typedef std::false_type is_always_equal;

  public:
    TrackingAllocator() : info_(new TrackingAllocatorInfo) {
    }

    TrackingAllocator(const TrackingAllocator&) = default;

    TrackingAllocator(TrackingAllocator&&) = default;

    template <typename U>
    TrackingAllocator(const TrackingAllocator<U>& other) : info_(other.info_) {
    }

    template <typename U>
    TrackingAllocator(TrackingAllocator<U>&& other)
        : info_(std::move(other.info_)) {
    }

    TrackingAllocator& operator=(const TrackingAllocator&) = default;

    TrackingAllocator& operator=(TrackingAllocator&&) = default;

    template <typename U>
    TrackingAllocator& operator=(const TrackingAllocator<U>& other) {
        info_ = other.info_;
        return *this;
    }

    template <typename U>
    TrackingAllocator& operator=(TrackingAllocator<U>&& other) {
        info_ = std::move(other.info_);
        return *this;
    }

    [[nodiscard]] T* allocate(size_t n) {
        info_->allocate_calls++;
        info_->allocation += sizeof(T) * n;
        if (info_->max_allocation < info_->allocation)
            info_->max_allocation = info_->allocation;
        return alloc_.allocate(n);
    }

    void deallocate(T* ptr, size_t n) {
        info_->deallocate_calls++;
        info_->allocation -= sizeof(T) * n;
        alloc_.deallocate(ptr, n);
    }

    template <typename U>
    bool operator==(const TrackingAllocator<U>& other) const {
        return info_.get() == other.info_.get();
    }

    template <typename U>
    bool operator!=(const TrackingAllocator<U>& other) const {
        return info_.get() != other.info_.get();
    }

    const TrackingAllocatorInfo& info() const {
        return *info_;
    }

  private:
    std::allocator<T> alloc_;

    std::shared_ptr<TrackingAllocatorInfo> info_;

    template <typename>
    friend class TrackingAllocator;
};

} // namespace pre

#endif // #ifndef PRE_MEMORY_TRACKING_ALLOCATOR
