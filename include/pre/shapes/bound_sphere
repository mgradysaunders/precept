/*-*- C++ -*-*/
/* Copyright (c) 2018-21 M. Grady Saunders
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   1. Redistributions of source code must retain the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*-*-*-*-*-*-*/
#if !(__cplusplus >= 201709L)
#error "Precept requires >= C++20"
#endif // #if !(__cplusplus >= 201709L)
#pragma once
#ifndef PRE_SHAPES_BOUND_SPHERE
#define PRE_SHAPES_BOUND_SPHERE

#include <pre/array>
#include <pre/math>
#include <pre/shapes/bound_box>

namespace pre {

/// A bounding sphere.
template <std::floating_point Float, size_t N>
class BoundSphere {
  public:
    /// Value type.
    typedef Array<Float, N> value_type;

  public:
    constexpr BoundSphere() noexcept = default;

    constexpr BoundSphere(const Array<Float, N>& cen, Float rad = 0) noexcept
        : center_(cen), radius_(rad) {
    }

    BoundSphere(const BoundBox<Float, N>& box) noexcept {
        if (box) {
            center_ = box.center();
            radius_ = length(box.diag()) / 2;
        }
    }

  public:
    constexpr const Array<Float, N>& center() const noexcept {
        return center_;
    }

    constexpr const Float& radius() const noexcept {
        return radius_;
    }

  public:
    constexpr bool overlaps(const BoundSphere& other) const noexcept {
        return bool(*this) && bool(other) &&
               distance2(center_, other.center_) <=
                       (radius_ + other.radius_) * (radius_ + other.radius_);
    }

    constexpr bool contains(const BoundSphere& other) const noexcept {
        return bool(*this) && bool(other) && radius_ >= other.radius_ &&
               distance2(center_, other.center_) <=
                       (radius_ - other.radius_) * (radius_ - other.radius_);
    }

    constexpr bool overlaps(const Array<Float, N>& point) const noexcept {
        return bool(*this) && distance2(center_, point) <= radius_ * radius_;
    }

    constexpr bool contains(const Array<Float, N>& point) const noexcept {
        return bool(*this) && distance2(center_, point) <= radius_ * radius_;
    }

  public:
    BoundSphere operator|(const BoundSphere& other) const noexcept {
        // If this is invalid, default to other. Note that other might also
        // be invalid, but that is ok because the union of two invalid
        // spheres should also be invalid.
        if (!bool(*this))
            return other;

        // If other is invalid, default to this.
        if (!bool(other))
            return *this;

        // If either this contains other or other contains this, then return
        // the containing sphere.
        auto c0 = this->center(), c1 = other.center();
        auto r0 = this->radius(), r1 = other.radius();
        auto delc = c1 - c0;
        auto delr = r1 - r0;
        auto len2 = length2(delc);
        if (len2 < delr * delr)
            return delr < 0 ? *this : other;

        // Otherwise, calculate minimal bounding sphere that surrounds both
        // this and other. This calculation uses normalize, instead of simply
        // dividing deltar by sqrt(len2), because normalize properly handles
        // very small and exactly zero-length vectors.
        return BoundSphere(
                Float(0.5) * (c0 + c1 + delr * normalize(delc)),
                Float(0.5) * (r0 + r1 + pre::sqrt(len2)));
    }

    BoundSphere operator|(const Array<Float, N>& point) const noexcept {
        return *this | BoundSphere(point);
    }

    friend constexpr BoundBox operator|(
            const Array<Float, N>& point, const BoundSphere& sphere) noexcept {
        return BoundSphere(point) | sphere;
    }

    BoundSphere operator|=(const auto& any) noexcept {
        return *this = *this | any;
    }

  public:
    /// Implicit cast as bool. (Is hyper volume non-negative?)
    constexpr operator bool() const noexcept {
        return radius_ >= 0;
    }

    /// Implicit cast as bound box.
    template <std::floating_point Other, size_t M>
    constexpr operator BoundBox<Other, M>() const noexcept {
        if (!bool(*this))
            return {};
        else
            return {center_ - radius_, center_ + radius_};
    }

    /// Implicit cast as other.
    template <std::floating_point Other, size_t M>
    constexpr operator BoundSphere<Other, M>() const noexcept {
        return {Array<Other, M>(center_), Other(radius_)};
    }

  public:
    void serialize(auto& serializer) {
        serializer <=> center_ <=> radius_;
    }

  private:
    Array<Float, N> center_ = {};

    Float radius_ = -1;
};

template <typename T, size_t N>
BoundSphere(const Array<T, N>&) -> BoundSphere<to_floating_point_t<T>, N>;

template <typename T, size_t N, typename U>
BoundSphere(const Array<T, N>&, const U&)
        -> BoundSphere<to_floating_point_t<T, U>, N>;

template <typename T, size_t N>
BoundSphere(const BoundBox<T, N>&) -> BoundSphere<to_floating_point_t<T>, N>;

} // namespace pre

#endif // #ifndef PRE_SHAPES_BOUND_SPHERE
