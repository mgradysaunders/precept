/*-*- C++ -*-*/
/* Copyright (c) 2018-21 M. Grady Saunders
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   1. Redistributions of source code must retain the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*-*-*-*-*-*-*/
#if !(__cplusplus >= 201709L)
#error "Precept requires >= C++20"
#endif // #if !(__cplusplus >= 201709L)
#pragma once
#ifndef PRE_DATA_STRUCTURES_TREE_UTILS
#define PRE_DATA_STRUCTURES_TREE_UTILS

// for std::vector
#include <vector>

// for pre::MemoryPool, pre::ObjectMemoryPool
#include <pre/data_structures/memory_pool>

// for pre::StaticStack
#include <pre/data_structures/static_stack>

namespace pre {

/// A node pointer stack for recursive operations.
template <typename Node, size_t Size = 0>
struct NodeStack {
  public:
    constexpr explicit NodeStack(size_t, const Node* root = nullptr) noexcept {
        push(root);
    }
    constexpr void push(const Node* node) noexcept {
        if (node)
            nodes_.push(const_cast<Node*>(node));
    }
    constexpr void push_if(bool cond, const Node* node) noexcept {
        if (cond && node)
            nodes_.push(const_cast<Node*>(node));
    }
    constexpr Node* pop() noexcept {
        return nodes_.pop();
    }
    constexpr bool empty() noexcept {
        return nodes_.empty();
    }

  private:
    StaticStack<Node*, Size> nodes_;
};

/// A node pointer stack for recursive operations, dynamic size specialization.
template <typename Node>
struct NodeStack<Node, 0> {
  public:
    explicit NodeStack(size_t depth, const Node* root = nullptr) {
        nodes_.reserve(2 * depth);
        push(root);
    }
    void push(const Node* node) {
        if (node)
            nodes_.push_back(const_cast<Node*>(node));
    }
    void push_if(bool cond, const Node* node) {
        if (cond && node)
            nodes_.push_back(const_cast<Node*>(node));
    }
    Node* pop() {
        Node* node = nodes_.back();
        nodes_.pop_back();
        return node;
    }
    bool empty() noexcept {
        return nodes_.empty();
    }

  private:
    std::vector<Node*> nodes_;
};

} // namespace pre

#endif // #ifndef PRE_DATA_STRUCTURES_TREE_UTILS
