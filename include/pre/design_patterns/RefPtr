/*-*- C++ -*-*/
/* Copyright (c) 2018-20 M. Grady Saunders
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   1. Redistributions of source code must retain the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*-*-*-*-*-*-*/
#if !(__cplusplus >= 201709L)
#error "Precept requires >= C++20"
#endif // #if !(__cplusplus >= 201709L)
#pragma once
#ifndef PRE_DESIGN_PATTERNS_REF_PTR
#define PRE_DESIGN_PATTERNS_REF_PTR

#include <atomic>
#include <pre/meta>

namespace pre {

/// An atomic signed lock-free integer.
///
/// \note
/// This is provided by the C++20 standard as `std::atomic_signed_lock_free`,
/// however it is not quite available in GCC yet. This declaration should be
/// removed once it becomes available.
///
using atomic_signed_lock_free = std::conditional_t<
        std::atomic_ptrdiff_t::is_always_lock_free,
        std::atomic_ptrdiff_t,
        std::conditional_t<
                std::atomic_long::is_always_lock_free,
                std::atomic_long,
                std::atomic_int>>;

/// A reference countable interface.
class RefCountable {
  public:
    virtual ~RefCountable() = default;

  public:
    atomic_signed_lock_free ref_count = 0;
};

inline void incr_ref(RefCountable* ptr) {
    if (ptr)
        ++ptr->ref_count;
}

inline void decr_ref(RefCountable* ptr) {
    if (ptr) {
        if (--ptr->ref_count == 0) {
            delete ptr;
        }
    }
}

/// A reference counter for a reference countable pointer.
template <typename T>
class RefPtr {
  public:
    constexpr RefPtr() noexcept = default;

    constexpr RefPtr(std::nullptr_t) noexcept {
    }

    RefPtr(const RefPtr& other) noexcept : ptr_(other.ptr_) {
        incr_ref(ptr_);
    }

    RefPtr(RefPtr&& other) noexcept : ptr_(other.ptr_) {
        other.ptr_ = nullptr;
    }

    explicit RefPtr(T* ptr) : ptr_(ptr) {
        incr_ref(ptr_);
    }

    /// Steal pointer, dummy int for overload
    explicit RefPtr(T* ptr, int) : ptr_(ptr) {
    }

    ~RefPtr() {
        decr_ref(ptr_);
    }

    RefPtr& operator=(const RefPtr& other) noexcept {
        if (ptr_ != other.ptr_) {
            decr_ref(ptr_);
            ptr_ = other.ptr_;
            incr_ref(ptr_);
        }
        return *this;
    }

    RefPtr& operator=(RefPtr&& other) noexcept {
        decr_ref(ptr_);
        ptr_ = other.ptr_;
        other.ptr_ = nullptr;
        return *this;
    }

  public:
    T* get() noexcept {
        return ptr_;
    }

    T* get() const noexcept {
        return ptr_;
    }

    void reset() noexcept {
        decr_ref(ptr_);
        ptr_ = nullptr;
    }

    template <typename U>
    void reset(U* ptr) noexcept {
        reset();
        ptr_ = ptr;
        incr_ref(ptr_);
    }

    void swap(RefPtr& other) noexcept {
        std::swap(ptr_, other.ptr_);
    }

    long use_count() const noexcept {
        return ptr_ ? long(ptr_->ref_count) : 0;
    }

  public:
    auto operator<=>(const RefPtr&) const = default;

    bool operator==(const RefPtr&) const = default;

    decltype(auto) operator*() noexcept {
        return (*ptr_);
    }

    decltype(auto) operator*() const noexcept {
        return (*ptr_);
    }

    decltype(auto) operator->() noexcept {
        return ptr_;
    }

    decltype(auto) operator->() const noexcept {
        return ptr_;
    }

    operator bool() const noexcept {
        return ptr_ != nullptr;
    }

    template <typename U>
    operator RefPtr<U>&() noexcept requires std::is_base_of_v<U, T> {
        return reinterpret_cast<RefPtr<U>&>(*this);
    }

    template <typename U>
    operator const RefPtr<U>&() const noexcept
            requires std::is_base_of_v<U, T> {
        return reinterpret_cast<const RefPtr<U>&>(*this);
    }

  private:
    T* ptr_ = nullptr;
};

template <concepts::subclass<RefCountable> T>
RefPtr(T*) -> RefPtr<T>;

template <typename U, typename T>
inline auto ref_cast(const RefPtr<T>& ref) {
    return RefPtr(reinterpret_cast<U*>(ref.get()));
}

template <typename T, typename... Args>
inline auto make_ref(Args&&... args) {
    return RefPtr(new T(std::forward<Args>(args)...));
}

} // namespace pre

#endif // #ifndef PRE_DESIGN_PATTERNS_REF_PTR
