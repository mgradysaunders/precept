/*-*- C++ -*-*/
/* Copyright (c) 2018-21 M. Grady Saunders
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   1. Redistributions of source code must retain the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*-*-*-*-*-*-*/
#if !(__cplusplus >= 201709L)
#error "Precept requires >= C++20"
#endif // #if !(__cplusplus >= 201709L)
#pragma once
#ifndef PRE_DESIGN_PATTERNS_PREPARABLE
#define PRE_DESIGN_PATTERNS_PREPARABLE

namespace pre {

/// A preparable object.
template <typename... Args>
class Preparable {
  public:
    virtual ~Preparable() = default;

    /// Prepare.
    void prepare(Args... args) {
        if (is_prepared_ == false) {
            is_prepared_ = true;
            on_prepare(args...);
        }
    }

    /// Unprepare, to undo anything done by `prepare()`.
    void unprepare() {
        if (is_prepared_ == true) {
            is_prepared_ = false;
            on_unprepare();
        }
    }

  protected:
    /// On-prepare handler.
    virtual void on_prepare(Args... args) = 0;

    /// On-unprepare handler, to undo anything done by `on_prepare()`.
    virtual void on_unprepare() = 0;

  private:
    bool is_prepared_ = false;
};

} // namespace pre

#endif // #ifndef PRE_DESIGN_PATTERNS_PREPARABLE
